1] We npm init our main folder to get package.json
2] add this all to our github using git.
3] We create a public/temp folder and add .gitkeep so that git keeps track of our empty folders too.
4] Create gitignore and add all the necessary data from .gitignore generator
5] create .env
6] create src folder and add reqd files in it 
(Admin@DESKTOP-UMDT2C6 MINGW64 /d/X_Web Develpoment/2_Chai Aur Backend/MegaYT/src (main)
$ touch app.js constants.js index.js)

7] set type:"moudle" in json

8] get nodemon(it restarts server automatically everytime we save)

(dev dependency:-means its only used during Develpomentand not for production & normal dependency stay even during production)

npm i -D nodemon   (i as devDependency)

change run srcipt to dev

9]  Add required folders in src 
$ mkdir controllers db middlewares models routes utils      (this is how pros do it)
Add the changes to github (Now we are done with structuring our project)

10] npm i -D prettier  --> Coz many people work on same project we i this devDependency to keep the formatting same throughout

    Add .prettierrc file in root(not src) 
    Add .prettierignore
                            /******************/
11] Going to mongoDb atlas web to create DB
12] Add monogDB url to .env and add DB name in constants.js

13] npm i dotenv mongoose express

        /**** Remember DB is always in another continent. So always apply async await as it takes time to get response 
        and try catch while handling DB coz its always difficult dealing with DB

14] Hence now go on to index.js in src root to connect our DB.
    Where we import index.js from db folder
    now for dotenv to work we gotta go to package.json and chnage start script

    *********************************

15] Create app in app.js with express export it and enable our app on our port in src/index.js

16] npm i cookie parser and cors. and go to app.js again
    now set cors and add cors origin in .env for use(Just like proxy)

17] Now in utils folder we create an asyncHandler file which will have a kindof syntax to handler async wait funcs in other files

18] Now create ApiError.js in utils again & ApiResponse

    ******************************************

19] create in models/ user.models.js and video.models.js--->npm i mongoose-aggregate-paginate-v2 (Now we can write quries)
    npm i bcrypt    --> pwd hashing
    npm i json-web-token  --> jwt is a bearer token anything that has it is safe to pass data to
    create tokens in .env to use

                        *******************************        

20] We gonna use cloudinary & multer to upload imgs and vids
    npm install cloudinary 
    npm install multer

    Basically we gonna take a file from user using multer and store it temporarily on our local storage(server) and then from there 
    pass it to cloudinary server. This 2step setting is kept to keep option of Reupload for user.

21] Create cloudinary.js in utils and add its urls in /.env

22] Now we gonna create middlewares/multer.middlewares.js 
    Now we gonna pass this file whenever we will deal with uploading files. So as to keep its copy as a temp with us.

                        *****************************